# -*- coding: utf-8 -*-
"""main.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xZEbpHu9902eUONpetCHfcY4-Zp0wWcu
"""


from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from tensorflow.keras.models import load_model
import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import os

app = Flask(__name__)

# ====== LINE 憑證 ======
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

# ====== 載入模型 ======
model = load_model("stock_predict_model.h5")

# ====== 設定 ======
tickers = ['AAPL', 'GOOGL', 'META', 'NVDA']
thresholds = {'AAPL': 0.6, 'GOOGL': 0.48, 'META': 0.65, 'NVDA': 0.63}
features = ['Close', 'MA_5', 'MA_10', 'RSI', 'MACD_diff', 'Volatility']
window = 10

# ====== 預測函式 ======
def predict_tomorrow(symbol):
    df = yf.download(symbol, period="1y")[['Close']].dropna()
    df['MA_5'] = df['Close'].rolling(window=5).mean()
    df['MA_10'] = df['Close'].rolling(window=10).mean()
    delta = df['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))
    ema12 = df['Close'].ewm(span=12).mean()
    ema26 = df['Close'].ewm(span=26).mean()
    df['MACD'] = ema12 - ema26
    df['MACD_signal'] = df['MACD'].ewm(span=9).mean()
    df['MACD_diff'] = df['MACD'] - df['MACD_signal']
    df['Volatility'] = df['Close'].pct_change().rolling(window=10).std()

    df = df.dropna()
    if len(df) < window:
        return f"{symbol} 資料不足，無法預測"

    # 特徵標準化
    scaler = MinMaxScaler()
    df_scaled = scaler.fit_transform(df[features])
    df_scaled = pd.DataFrame(df_scaled, columns=[f'Scaled_{col}' for col in features], index=df.index)

    # 取最新一段
    x_input = df_scaled.iloc[-window:].values.reshape(1, window, len(features))
    prob = model.predict(x_input)[0][0]
    threshold = thresholds.get(symbol, 0.5)
    direction = "漲 📈" if prob > threshold else "跌 📉"
    return f"{symbol} 明天預測：{direction}（信心 {round(prob*100, 2)}%）"

# ====== 測試首頁 ======
@app.route("/")
def home():
    return "Line Bot for Stock Prediction is Running."

# ====== LINE callback ======
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

# ====== 處理 LINE 訊息 ======
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    msg = event.message.text.upper()
    reply = "請輸入股票代號，例如 AAPL、NVDA"
    for sym in tickers:
        if sym in msg:
            reply = predict_tomorrow(sym)
            break
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
